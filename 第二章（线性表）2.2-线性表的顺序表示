#include<cstdio>
#include<iostream>
using namespace std;

const int MAXSIZE=50;
typedef struct{
	elemType data[MAXSIZE];
	int length;
}SqList;

/*
2.2.3:二、4
*/
//我的做法，比较复杂，还不能确定对不对。这种做法和下面第5题的答案做法思路差不多，但是我的代码十分繁琐！！！！
bool del2(SqList &l,elemType s,elemType t){
	if(l.length==0 || s>=t)return false;
	
	int i=0;
	int k=0;
	int flag=0;
	while(i<l.length){
		if(flag==0&&l.data[i]==s){//找到s后k开始记录要删除的元素个数。
			flag=1;
		}else if(flag==1&&l.data[i]==t){
			flag=2;//到t时结束计数。
			k++;//因为还差一个t所以k要加一。
			if(i+1<l.length)i++;//将i移动到t后面的位置。
			else{
				break;
			}
		}
		if(flag==1){
			k++;
		}else if(flag==2){
			l.data[i-r]=l.data[i];
		}
		i++;
	}
	l.length-=k;
}

/*
2.2.3：二、5
*/
//答案的做法
bool del3(SqList &l,elemType s,elemType t){
	if(l.length==0 || s>=t) return false;
	for(int i;i<l.length;i++){
		if(l.data[i]>s&&l.data[i]<t){
			k++;
		}else{
			l.data[i-k]=l.data[i];
		}
	}//for
	l.length-=k;
	return true;
}

/*
2.2.3：二、6
有序表，删除重复元素
*/
//mine
void del4(SqList &l){
	int k=0;
	elemType tmp=l.data[0];
	for(int i=1;i<l.length;i++){
		if(l.data[i]==tmp){
			k++;
		}else{
			tmp=l.data[i];
			l.data[i-k]=tmp;
		}
	}
	l.length-=k;
}
//答案，做法更简洁，逻辑上更容易考虑。
bool del4_2(SqList &l){
	if(l.length==0)return false;
	int i,j;
	for(i=0,j=1;j<l.length;j++){
		if(l.data[i]!=l.data[j]){
			l.data[++i]=l.data[j];
		}
	}
	l.length=i+1;
}

/*
2.2.3：二、7
*/
SqList* merge(SqList &la,SqList &lb){
	int i=0,j=0,k=0;
	SqList* lc=(SqList*)malloc(sizeof(SqList));
	while(k<MAXSIZE){
		if(i<la.length&&j<lb.length){
			if(la.data[i]<=lb.data[j]){
				lc.data[k]=la.data[i++];
			}else{
				lc.data[k]=lb.data[j++];
			}
		}else if(i<la.length){
			lc.data[k]=la.data[i++];
		}else if(j<lb.length){
			lc.data[k]=lb.data[j++];
		}
		k++;
	}
	lc.length=k;
	return lc;
}
//答案，还是比我的做法效率要高！！！
bool merge_2(SqList a,SqList b,SqList &c){
	//……
}

/*
2.2.3：二、8
a[m+n]互换线性表
*/
//答案，我没考虑好原地调整的算法
void reverse(elemType a[],int left,int right,int arraySize){
	//0~n-1,n~m-1
	if(left>=right||right>=arraySize) return;
	int mid=(left+right)/2;
	for(int i=0;i<=mid-left;i++){//我觉得这一部分没必要怎么复杂，可以直接left++，right--，判断条件是left<=right。
		elemType tmp=a[left+i];
		a[left+i]=a[right-i];
		a[right-i]=tmp;
	}
}
void exchange(elemType a[],int m,int n,int arraySize){
	reverse(a,0,m+n-1,arraySize);
	reverse(a,0,n-1,arraySize);//注意此处是n-1而不是m-1，因为上一步已经把n对应的顺序表调换到前面了。
	reverse(a,n,m+n-1,arraySize);
}

/*
2.2.3：二、9
线性表，增序有序，最少时间，找到x，找不到即插入x，仍保持递增有序。
*/
//答案。我自己写得无比复杂且思路混乱，已经删了。
void find_insert(elemType a[],int arraySize,elemType x){
	int left=0,right=arraySize-1,mid;
	while(low<=high){
		mid=(low+high)/2;
		if(a[mid]==x)break;
		else if(a[mid]<x)low=mid+1;
		else high=mid-1;//因为mid+1和mid-1的语句一次只会执行一个，所以只要x没找到，总会到low==high的时刻。
	}
	if(a[mid]==x&&mid!=arraySize-1){
		int t=a[mid];
		a[mid]=a[mid+1];
		a[mid+1]=t;
	}
	if(low>high){
		for(int i=arraySize-1;i>high;i--)a[i+1]=a[i];//这里好像有错，因为a[i+1]超出数组的范围了。
		a[i+1]=x;
	}
}

/*
2.2.3：二、10
*/
//和第八题是类似的
//不过时间和空间复杂度我不太会分析！！！！！
//另一种做法是开数组。

/*
2.2.3：二、11
*/
//mine：程序是错的，因为比较两个序列时，a序列可能比b序列小，但是当把a1和b1指向的数进行比较时，head直接指向了b1的位置，跳过了数组a中的许多数，最后求出的结果就不是中位数！！！！！
int search(int a[],int as,int b[],int bs){
	int a1=0,a2=as-1,b1=0,b2=bs-1;
	int head=a[0]<b[0]?a[0]:b[0];
	int tail=a[as-1]>b[bs-1]?a[as-1]:b[bs-1];
	while(head<tail){
		if(a[a1]>b[b1]) {
			head=a[a1];
			b1++;
		}else{
			head=b[b1];
			a1++;
		}
		if(a[a2]<b[b2]){
			tail=a[a2];
			b2--;
		}else{
			tail=b[b2];
			a2--;
		}
		printf("head=%d,tail=%d\n",head,tail);
	}
	if(head==tail){
		return head;
	}else{//head>tail
		return tail;
	}
}

int main_(){
	int a[]={3,4,5,66,343,555};
	int b[]={3,29,30,31,32,560,666};
	printf("%d",search(a,6,b,7));
	return 0;
}

/*
测试的一个结果：
head=3,tail=555
head=4,tail=555
head=29,tail=32,
这里head应该为5，但是由于b1以及程序逻辑错误对head直接赋予a[a1],b[b1]中更大的值，导致程序是错的。T_T
head=29,tail=32
head=66,tail=32
中位数：32
实际应该是31
*/

//答案的思路
/*
AB为两个序列，ab为它们的中位数。
①a=b，即所求中位数。
②a>b，舍弃A中较小的一般，舍弃B中较大的一半，两次舍弃的长度相等。
③a<b，舍弃A中较大的一般，舍弃B中较小的一半，两次舍弃的长度相等。
重复以上过程，知道A、B中都只剩下一个元素，此时较小者为所求。
*/
int search_2(int A[],int B[],int n){
	int s1=0,d1=n-1,m1,s2=0,d2=n-1,m2;//分别A、B的首位数、末位数、中位数。
	while(s1!=d1 || s2!=d2){
		m1=(s1+d1)/2;
		m2=(s2+d2)/2;
		if(A[m1]==B[m2]) return A[m1];
		if(A[m1]<B[m2]){
			if((s1+d1)%2==0){//如果元素个数为奇数
				s1=m1;//舍弃中间点以前的部分保留中间点
				d2=m2;
			}else{//偶数
				s1=m1+1;//舍弃A中间点以及中间点以前的部分
				d2=m2;//舍弃B中间点以后部分且保留中间点。因为m1，m2分别是A、B前一半最后一个。这样舍去剩下的数正好是大小在正中间的偶数个数。
			}
		}else{
			if((s2+d2)%2==0){
				d1=m1;
				s2=m2;
			}else{
				d1=m1;
				s2=s2+1;
			}
		}
	}
	return A[s1]<B[s2]?A[s1]:B[s2];//注意到循环中最后m1、m2分别为A、B的中位数，但并不是A+B的中位数。所以中位数要从s1,s2,d1,d2中比较得来。
	//而结束时两个序列都各剩一个数，所以此时应该s1==d1、s2==d2，不过这个相等我想得还不太清楚！！！！！！
}

/*
2.2.3：二、12
*/
//mine：不知道对不对
int pivotElement(int a[],int arraySize){
	int aa[arraySize];
	for(int i=0;i<arraySize;i++){
		aa[i]=0;
	}
	for(int i=0;i<arraySize;i++){
		aa[a[i]]++;
	}
	for(int i=0;i<arraySize;i++){
		if(aa[i]>arraySize/2) return aa[i];
	}
	return -1;
}
//答案的想法很精妙！！！！
