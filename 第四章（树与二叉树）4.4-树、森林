/*
4.4.6，二：5
编程求以孩子兄弟表示法存储的森林的叶子结点数。
*/
typedef struct node{
	ElemType data;
	struct node *fch,*nsib;
}Tree;
int leaves(Tree *t){
	if(t==NULL)return 0;
	else{
		if(t->fch==NULL){
			return 1+leaves(t->nsib);
		}else{
			return leaves(t->fch)+leaves(t->nsib);
		}
	}
}

/*
4.4.6，二：6
以孩子兄弟链表为存储结构，请设计递归算法求树的深度。
*/
typedef struct node{
	ElemType data;
	struct node *fch,*nsib;
}Tree;
int height(Tree *t){
	int hc,hs;
	if(t==NULL){
		return 0;
	}else{
		hc=height(t->fch);
		hs=height(t->nsib);
/*注释里的做法是有问题的
		if(hc>hs){
			return hc+1;
		}else{
			return hs+1;
		}
*/
//应取子女高度加1和兄弟子树中大的那一个
		if(hc+1>hs){
			return hc+1;
		}else{
			return hs;
		}
	}
}

/*
4.4.6，二：7
已知一棵树的层次序列以及每个结点的度，编写一个算法构造此树的孩子-兄弟链表。
*/
#define maxNodes 15
typedef struct node{
	ElemType data;
	struct node *fch,*nsib;
}CSNode;
void createCSTree_Degree(CSTree &t,ElemType e[],int degree[],int n){
//根据树结点的层次序列e[]和各结点的度degree[]构造树的孩子-兄弟链表，n是结点的个数
	CSNode *pointer=new CSNode[maxNodes];
	if(pointer==NULL){
		printf("no space available");
		return;
	}
	
	int i;
	for(i=0;i<n;i++){
		pointer[i]=new CSNode;
		if(pointer[i]==NULL){
			printf("no space available");
			return;
		}
		pointer[i]->data=e[i];
		pointer[i]->fch=pointer[i]->nsib=NULL;
	}
	int j,d,k=0;
	for(i=0;i<n;i++){
		d=degree[i];
		if(d){//结点不是叶子结点
			k++;//要连接的孩子结点的下标，可能与i所在的位置相差很远，因为i可能有兄弟。
			pointer[i]->fch=pointer[k];
			for(j=1;j<d;j++){//书上写j=2，为什么？？？？
			//这一层元素数大于等于2才需要进行循环里的操作
				k++;//书上好像少了这一句
				pointer[k-1]->nsib=pointer[k];
			}
		}
	}
	t=pointer[0];
	delete [] pointer;
}
