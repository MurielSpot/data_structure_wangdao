typedef struct LNode{
	ElemType data;
	struct LNode* next;
}LNode,*LinkList;

/*
2.3.7，二：1
设计一个递归算法，删除不带头结点的单链表L中的所有值为x的结点。
*/
void Del_X_3(LinkList &l,ElemType x){
	LNode* p;
	if(l==NULL){
		return;
	}
	if(l->data==x){
		p=l;
		l=l->next;
		free(p);
		Del_X_3(l,x);
	}else{
		Del_X_3(l,x);
	}
}

/*
2.3.7，二：2
带头结点，L，删除所有x
*/
//mine：这种写法应该是错的，因为l的值在程序中被更改了。
void del2(LinkList &l,ElemType x){
	LNode* p;
	while(l->next!=NULL){
		if(l->next->data==x){
			p=l->next;
			l->next=p->next;
			free(p);
		}
		l=l->next;
	}
}
/*
2.3.7，二：3
*/
//mine：有错误
void reverseprint(LinkList &l){
	if(l->next){
		reverseprint(l->next);
		printf("%d",l->data);//这一步应该放在if外面，因为放在里面则最后一个结点打印不出来。因为最后一个结点的下一个结点为null，所以这个if不成立，data就答应不出来了。
		//所以要注意到，最后结束的时候处理的是最后一个结点的信息，当l->next==NULL时，if里的reverseprint是不会执行的，即不会传给函数一个值为null的指针。
	}
}
/*
2.3.7，二：4
*/
#include<cstdio>
#include<cstdlib>

typedef int ElemType;

typedef struct LNode{
	ElemType data;
	struct LNode* next;
}LNode,*LinkList;

void init(LinkList &head){
	head=(LinkList)malloc(sizeof(LNode));
	head->next=NULL;
	printf("how many elements:");
	int n;
	scanf("%d",&n);
	head->data=n;
	LNode* p=head;
	while(n--){
		p->next=(LinkList)malloc(sizeof(LNode));
		p=p->next;
		p->next=NULL;
		printf("data%d:",head->data-n);
		scanf("%d",&(p->data));
	}
}

void print(LinkList p){
	while(p->next){
		p=p->next;
		printf("%d, ",p->data);
	}
	printf("\n");
}
//下面这个函数时错的，因为l里存的是头结点，l相当于一个盒子，l的值是头结点所存位置的地址号。
//所以l赋给pre后，修改pre的值也就是修改了l存的值。所以程序的整个逻辑都是错的。
//刚刚查到了&m=n，即表示m就是n的别名。所以程序中l就是外部head的别名。
void delminwrong(LinkList &l){
	LNode *pre=l,*p=l;
	ElemType min;

	if(l->next) min=l->data;
	else return;

	while(p->next){
		if(p->next->data<min){
			pre=p;
			p=p->next;
			min=p->data;
		}else{
			p=p->next;
		}
	}
	p=pre->next;
	pre->next=p->next;//注意第一个元素为最小值时，删除的是第一个结点，所以pre一开始要初始化为l。
	free(p);
}

//目前下面的函数没有问题
void delmin(LinkList l){
	LNode *pre=l,*p=l;
	ElemType min;

	if(l->next) min=l->next->data;
	else return;

	while(p->next){
		if(p->next->data<min){
			pre=p;
			p=p->next;
			min=p->data;
		}else{
			p=p->next;
		}
	}
	p=pre->next;
	pre->next=p->next;//注意第一个元素为最小值时，删除的是第一个结点，所以pre一开始要初始化为l。
	free(p);
}

int main(){
	LinkList head;
	init(head);
	print(head);
	
	delmin(head);print(head);
	delmin(head);print(head);
	delmin(head);print(head);
	delmin(head);print(head);
	delmin(head);print(head);
	delmin(head);print(head);
	return 0;
}

/*
2.3.7，二：5
*/
void reverselist(LinkList l){
	LNode *t,*first;
	if(l->next&&l->next->next){
		t=l->next->next;0
		l->next->next=NULL;
	}else return;
	while(t){
		first=l->next;
		l->next=t;
		t=t->next;
		l->next->next=first;
	}
}
/*
2.3.7，二：6
*/
void sort(LinkList &l){
	LinkList newhead=(LinkList)malloc(sizeof(LNode));
	newhead->next=NULL;
	LNode *p;
	LNode *preNew,*pNew;
	while(l->next){
		p=l->next;
		l->next=p->next;
		preNew=newhead,pNew=newhead->next;
		while(pNew && p->data>pNew->data){
			preNew=pNew;
			pNew=pNew->next;
		}
		preNew->next=p;
		preNew->next->next=pNew;
	}
	l->next=newhead->next;
	free(newhead);
}
/*
2.3.7，二：7
*/
//mine
void dela2b(LinkList l,ElemType a,ElemType b){
	LNode *pre=l,*q=l->next;
	while(q){
		if(q->data>a&&q->data<b){
			pre->next=q->next;
			free(q);
		}else{
			pre=pre->next;
		}
		q=pre->next;
	}
}
/*
2.3.7，二：8
给定两个单链表，编写算法找出两个链表的公共结点。
*/
//答案
LinkList searchLstCommon(LinkList L1,LinkList L2){
	int len1=Length(L1),len2=Length(L2);
	LinkList longList,shortList;
	int dist;
	if(len1>len2){
		longList=L1->next;
		shortList=L2->next;
		dist=len2-len1;
	}else{
		longList=L2->next;
		shortList=L1->next;
		dist=len1-len2;
	}
	while(dist--){
		longList=longList->next;
	}
	while(longList){
		if(longList==shortList){
			return longList;
		}else{
			longList=longList->next;
			shortList=shortList->next;
		}
	}
}
/*
2.3.7，二：9
给定一个带表头结点的单链表，设head为头指针，结点的结构为（data，next），data为整形元素，next为指针，试写出算法：按递增次序输出单链表中各结点的数据元素，并释放结点所占的存储空间。（要求：不允许使用数组作为辅助空间。）
*/
//mine，有错误，没有释放头结点！！！！！！！！！！
void delMin(LinkList l){
	LNode *pre=l,*p=l->next,*minPre;
	ElemType min;
	while(l->next){
		minPre=pre=l;p=l->next;//minPre每次重新循环是都要重新赋值，因为下面的if条件不一定能进入，没有进入if且没有重新初始化minPre的值是一个废值。
		min=l->next->data;//注意min在后面的循环之前每次都要重新初始化，不然存的就是之前取的最小值了。
		while(p){
			if(p->data<min){
				min=p->data;
				minPre=pre;
			}
			pre=p;
			p=pre->next;
		}
		p=minPre->next;
		minPre->next=p->next;
		free(p);
		print(l);
	}
}

/*
2.3.7，二：10
将带头结点的单链表A，分解为两个带头结点的单链表A和B，使得A含有原表中序号为奇数的元素，B中含有原表中序号为偶数的元素。
*/
#include<cstdio>
#include<cstdlib>

typedef int elemType;
typedef struct linkList{
	elemType data;
	struct linkList *next;
}listNode;
linkList* decompose(linkList* a){
	//原链表a，分解后的a仍存在a中，b另外新建，函数返回的是b
	if(a==NULL){
		return NULL;
	}
	listNode* ahead=a;
	
	listNode* bhead=new listNode;
	listNode* b=bhead;
	b->next=NULL;
	while(a->next){
		a=a->next;
		if(a->next){
			b->next=a->next;
			b=b->next;
			a->next=b->next;
			b->next=NULL;
		}
	}
	return bhead;
}
int main(){
	//建立链表
	linkList* a=new listNode;
	linkList* ahead=a;
	a->next=NULL;
	int i=0;
	while(i<10){
		a->next=new listNode;
		a=a->next;
		a->data=20-i;
		a->next=NULL;
		i++;
	}
	
	linkList *bhead,*b=decompose(ahead);
	
	a=ahead->next;
	while(a){
		printf("%d,",a->data);
		a=a->next;
	}
	
	printf("\n");
	bhead=b;
	b=bhead->next;
	while(b){
		printf("%d,",b->data);
		b=b->next;
	}
	return 0;
}

/*
2.3.7，二：11
*/
#include<cstdio>
#include<cstdlib>

typedef int elemType;
typedef struct linkList{
	elemType data;
	struct linkList *next;
}listNode;
linkList* decompose(linkList* a){
	//原链表a，分解后的a仍存在a中，b另外新建，函数返回的是b
	if(a==NULL){
		return NULL;
	}
	listNode* ahead=a;
	
	listNode* bhead=new listNode;
	bhead->next=NULL;
	
	listNode* tmp;
	while(a->next){
		a=a->next;
		if(a->next){
			tmp=a->next;
			a->next=a->next->next;
			tmp->next=bhead->next;
			bhead->next=tmp;
		}
	}
	return bhead;
}
int main(){
	//建立链表
	linkList* a=new listNode;
	linkList* ahead=a;
	a->next=NULL;
	int i=0;
	while(i<9){
		a->next=new listNode;
		a=a->next;
		a->data=20-i;
		a->next=NULL;
		i++;
	}
	
	linkList *bhead,*b=decompose(ahead);
	
	a=ahead->next;
	while(a){
		printf("%d,",a->data);
		a=a->next;
	}
	
	printf("\n");
	bhead=b;
	b=bhead->next;
	while(b){
		printf("%d,",b->data);
		b=b->next;
	}
	return 0;
}

/*
2.3.7，二：12
递增有序线性表，存储方式为单链表，去掉相同元素，使表中不再有重复元素。
*/
#include<cstdio>
#include<cstdlib>

typedef int elemType;
typedef struct linkList{
	elemType data;
	struct linkList *next;
}listNode;
void del_Same(linkList *ahead){
	//原链表a，分解后的a仍存在a中，b另外新建，函数返回的是b
	if(ahead==NULL){
		return;
	}
	listNode* a=ahead->next;
	listNode *tmp,*pre=ahead;
	while(a&&a->next){
		if(a->data==a->next->data){
			tmp=a;
			pre->next=a->next;
			delete tmp;
			a=pre->next;
		}else{
			pre=a;
			a=a->next;
		}
	}
}
int main(){
	//建立链表
	linkList* a=new listNode;
	linkList* ahead=a;
	a->next=NULL;
	int i=0;
	while(i<9){
		a->next=new listNode;
		a=a->next;
		if(i==0||i==6){
			a->data=10;
		}else a->data=20;
		a->next=NULL;
		i++;
	}
	
	del_Same(ahead);
	
	a=ahead->next;
	while(a){
		printf("%d,",a->data);
		a=a->next;
	}
	
	printf("\n");
	return 0;
}

/*
2.3.7，二：13
两个递增的单链表，归并成一个递减的单链表。
*/
#include<cstdio>
#include<cstdlib>

typedef int elemType;
typedef struct linkList{
	elemType data;
	struct linkList *next;
}listNode;

void merge(linkList *ahead,linkList* bhead){
	//结果存在ahead里,bhead销毁
	//有一个单链表不存在。
	if(ahead==NULL||bhead==NULL){
		return;
	}//链表都存在，继续
	
	//将ahead断链，置空。
	listNode *worka=ahead->next;
	ahead->next=NULL;
	listNode *workb=bhead->next;
	
	//释放bhead
	delete bhead;
	
	//归并所有结点到ahead所指的链表，使用头插法。
	listNode *tmpa,*tmpb;
	while(worka&&workb){
		if(worka->data < workb->data){
			tmpa=worka;
			worka=worka->next;
			tmpa->next=ahead->next;
			ahead->next=tmpa;
		}else{
			tmpb=workb;
			workb=workb->next;
			tmpb->next=ahead->next;
			ahead->next=tmpb;
		}
	}
	while(worka){
		tmpa=worka;
		worka=worka->next;
		tmpa->next=ahead->next;
		ahead->next=tmpa;
	}
	while(workb){
		tmpb=workb;
		workb=workb->next;
		tmpb->next=ahead->next;
		ahead->next=tmpb;
	}
}
int main(){
	int arr1[10]={1,6,7,8,10,22,   33,245};
	int arr2[10]={3,4,8,9,34,   98,100};
	
	//建立链表
	linkList* a=new listNode;
	linkList* ahead=a;
	a->next=NULL;
	
	linkList* b=new listNode;
	linkList* bhead=b;
	b->next=NULL;
	
	int i=0;
	while(i<8){
		a->next=new listNode;
		a=a->next;
		a->data=arr1[i];
		a->next=NULL;
		i++;
	}
	i=0;
	while(i<7){
		b->next=new listNode;
		b=b->next;
		b->data=arr2[i];
		b->next=NULL;
		i++;
	}
	
	merge(ahead,bhead);
	
	printf("a:");
	a=ahead->next;
	while(a){
		printf("%d,",a->data);
		a=a->next;
	}
	return 0;
}

/*
2.3.7，二：14
两个递增的单链表，将公共元素产生单链表C，不破坏原先两个单链表的结点。
*/
#include<cstdio>
#include<cstdlib>

typedef int elemType;
typedef struct linkList{
	elemType data;
	struct linkList *next;
}listNode;

linkList* common(linkList *ahead,linkList* bhead){
	listNode *chead=new listNode,*tmp;
	chead->next=NULL;

	if(ahead&&bhead){
		ahead=ahead->next;
		bhead=bhead->next;
	}
	while(ahead&&bhead){
		if(ahead->data == bhead->data){
			tmp=new listNode;
			tmp->data=ahead->data;
			tmp->next=chead->next;
			chead->next=tmp;
			ahead=ahead->next;
			bhead=bhead->next;
		}else if(ahead->data < bhead->data){
			ahead=ahead->next;
		}else{
			bhead=bhead->next;
		}
	}
	return chead;
}
int main(){
	int arr1[10]={1,3,7,8,10,22,100,245};
	int arr2[10]={3,4,8,9,33,100,245};
	
	//建立链表
	linkList* a=new listNode;
	linkList* ahead=a;
	a->next=NULL;
	
	linkList* b=new listNode;
	linkList* bhead=b;
	b->next=NULL;
	
	int i=0;
	while(i<8){
		a->next=new listNode;
		a=a->next;
		a->data=arr1[i];
		a->next=NULL;
		i++;
	}
	i=0;
	while(i<7){
		b->next=new listNode;
		b=b->next;
		b->data=arr2[i];
		b->next=NULL;
		i++;
	}
	
	linkList* chead=common(ahead,bhead);
	
	printf("c:");
	a=chead->next;
	while(a){
		printf("%d,",a->data);
		a=a->next;
	}
	return 0;
}

/*
2.3.7，二：15
两个递增的单链表a，b，求两者交集，存放在a中。
*/
#include<cstdio>
#include<cstdlib>

typedef int elemType;
typedef struct linkList{
	elemType data;
	struct linkList *next;
}listNode;

void common(linkList *a,linkList* b){
	//a保留，b销毁
	listNode *ahead,*bhead,*tmp;
	if(a&&b){
		ahead=a->next;
		a->next=NULL;
		bhead=b->next;
		delete b;
	}else if(a){
		//只有a存在，清除a中元素。
		ahead=a->next;
		while(ahead){
			tmp=ahead;
			ahead=ahead->next;
			delete tmp;
		}
	}else if(b){
		//只有b存在，销毁b
		while(b){
			tmp=b;
			b=b->next;
			delete tmp;
		}
	}
	
	//b头结点已销毁。数据存在a中，a已置空，ahead,bhead分别为原a,b链表的工作结点。
	while(ahead&&bhead){
		if(ahead->data == bhead->data){
			//删除原b中一个结点，bhead指向下一个结点
			tmp=bhead;
			bhead=bhead->next;
			delete tmp;
			//原a中的结点连入新a中（头插），ahead指向下一结点
			tmp=ahead;
			ahead=ahead->next;
			tmp->next=a->next;
			a->next=tmp;
		}else if(ahead->data < bhead->data){
			tmp=ahead;
			ahead=ahead->next;
			delete tmp;
		}else{
			tmp=bhead;
			bhead=bhead->next;
			delete tmp;
		}
	}
	while(ahead){
		tmp=ahead;
		ahead=ahead->next;
		delete tmp;
	}
	while(bhead){
		tmp=bhead;
		bhead=bhead->next;
		delete tmp;
	}
}
int main(){
	int arr1[10]={1,3,7,8,10,22,100,245};
	int arr2[10]={3,4,8,9,33,100,245};
	
	//建立链表
	linkList* a=new listNode;
	linkList* ahead=a;
	a->next=NULL;
	
	linkList* b=new listNode;
	linkList* bhead=b;
	b->next=NULL;
	
	int i=0;
	while(i<8){
		a->next=new listNode;
		a=a->next;
		a->data=arr1[i];
		a->next=NULL;
		i++;
	}
	i=0;
	while(i<7){
		b->next=new listNode;
		b=b->next;
		b->data=arr2[i];
		b->next=NULL;
		i++;
	}
	
	common(ahead,bhead);
	
	printf("a:");
	a=ahead->next;
	while(a){
		printf("%d,",a->data);
		a=a->next;
	}
	return 0;
}

/*
2.3.7，二：16
两个递增的单链表a，b，求两者交集，存放在a中。
*/
#include<cstdio>
#include<cstdlib>

typedef int elemType;
typedef struct linkList{
	elemType data;
	struct linkList *next;
}listNode;

bool subsequence(linkList *ahead,linkList* bhead){
	listNode *a=ahead->next,*b=bhead->next,*anext=ahead->next;
	while(a&&b){
		while(a->data!=b->data){
			//如果a当前结点的值与b第一个结点的值不相等，a继续寻找下一个结点。
			a=a->next;
			if(!a){
				return false;
			}
		}
		//a当前结点和b的第一个结点值相等，则依次比较之后的结点是否相同
		anext=a->next;
		while(a->data==b->data){
			a=a->next;
			b=b->next;
			if(!a&&b){//如果a结束了b却没结束，说明b不是a的子串。
				return false;
			}else if(!b){//如果b结束了，不管a结束或没结束，b都是a的子串。
				return true;
			}
		}
		//a和b都没结束，就要继续从头比较a与b相等时a的下一个元素和b的第一位的元素是否相等。
		a=anext;
		b=bhead->next;
	}
	return false;
}
int main(){
	int arr1[10]={3,7,8,11,10,23,21,22,100,245};
	int arr2[10]={3,7,8,10};
	
	//建立链表
	linkList* a=new listNode;
	linkList* ahead=a;
	a->next=NULL;
	
	linkList* b=new listNode;
	linkList* bhead=b;
	b->next=NULL;
	
	int i=0;
	while(i<8){
		a->next=new listNode;
		a=a->next;
		a->data=arr1[i];
		a->next=NULL;
		i++;
	}
	i=0;
	while(i<4){
		b->next=new listNode;
		b=b->next;
		b->data=arr2[i];
		b->next=NULL;
		i++;
	}
	
	if(subsequence(ahead,bhead)){
		printf("YES");
	}else{
		printf("NO");
	}
	
	return 0;
}

/*
2.3.7，二：17
判断带头结点的循环双链表是否对称。
*/
//注意：有头结点时，循环链表为空时prior和next都指向头结点。循环链表非空时，最后一个元素next指向头结点，第一个元素prior指向头结点。
struct DlinkList{
	int data;
	struct DlinkList *prior;
	struct DlinkList *next;
};
bool symmetry(DlinkList l){
	//头结点的next和prior分别指向第一个结点和最后一个结点。
	DlinkList *p=l.next,*q.prior;
	while(p!=q&&p->prior!=q){
		if(p->data!=q->data){
			return false;
		}else{
			p=p->next;
			q=q->prior;
		}
	}
	return true;
}

/*
2.3.7，二：18
两个带头结点的循环单链表h1，h2，将h2接到h1之后，链接后的链表仍保持单链表形式。
*/
//注意！！尾结点的next指向头结点。
struct linkList{
	int data;
	struct linkList *next;
};
void singlyLinkedList(linkList h1,linkList h2){
/*
	linkList *a=h1->next,*b=h2->next;
	while(a->next!=h1->next){
		a=a->next;
	}
	while(b->next!=h2->next){
		b=b->next;
	}
	//h1的尾结点指向h2的头，h2的尾结点指向h1的头，h2头结点指向h1的头结点，即最终的头结点。
	a->next=h2->next;
	b->next=h1->next;
	h2->next=h1->next;
*/
	linkList *a=h1,*b=h2;
	while(a->next!=h1){
		a=a->next;
	}
	while(b->next!=h2){
		b->next;
	}
	a->next=h2->next;//答案写的是h2，将头结点h2直接加入到链表中了，我觉得不合适。
	b->next=h1;
	h2->next=h1->next;//答案没有这一句，h2仍指向原循环链表的头结点，则这样的循环链表有两个头结点。
}

/*
2.3.7，二：19
带头结点的循环单链表，其结点值均为正整数。找出单链表中结点值最小的结点，并删除，重复此步骤，直到表空，删除头结点。
*/
#include<cstdio>
#include<cstdlib>

typedef int elemType;
typedef struct linkList{
	elemType data;
	struct linkList *next;
}listNode;

bool del_minimum(linkList *ahead){
	//初始化变量，min一开始为第一个结点。
	listNode *min=ahead->next,*work=ahead->next,*pre=ahead,*minPre=ahead;
	while(work){
		if(work==ahead){//一圈寻找完
			if(work->next==ahead){//链表已经空，删除头结点。
				delete work;//delete一个非空指针后需要赋值为null，因为非空指针不会被置0，仍然指向原来的地址，再次delete它会出现问题。但是delete一个空指针是可以的。
				work=NULL;
			}else{//链表非空，打印并删除min。再次重置pre,work,min，寻找新一轮的最小值。
				printf("%d,",min->data);
				minPre->next=min->next;
				delete min;
				pre=minPre=ahead;
				work=ahead->next;
				min=work;
			}
		}else{//一圈未找完
			//找到更小值更新min和minPre，未找到则更新pre和work
			if(min->data>work->data){
				minPre=pre;
				min=work;
			}else{
				pre=work;
				work=work->next;
			}
		}
	}
	return true;
}
int main(){
	int arr1[10]={33,7,8,116,10,23,121,22,100,245};
	
	//建立链表
	linkList* a=new listNode;
	linkList* ahead=a;
	a->next=NULL;
	
	int i=0;
	while(i<10){
		a->next=new listNode;
		a=a->next;
		a->data=arr1[i];
		a->next=NULL;
		i++;
	}
	a->next=ahead;
	
	del_minimum(ahead);
	
	return 0;
}

/*
2.3.7，二：20
头指针为L的带头结点的非循环双向链表，每个结点有data，pred，next，此外还有一个访问频度域freq，初始化为0。
每进行一次locate(L,x)运算，x的freq增1，并使此链表中的结点保持按访问频度非增（递减）顺序排列，同时最近访问的结点排在频度相同的结点的前面，以便使频繁访问的结点总是靠近表头。
编写符合上述要求的locate函数，返回找到结点的地址，类型为指针型。
*/
#include<cstdio>
#include<cstdlib>

typedef int elemType;
typedef struct linkList{
	elemType data;
	int freq;
	struct linkList *next,*pred;
}listNode;

listNode* locate(linkList *ahead,elemType x){
	listNode *pre=ahead,*a=ahead->next;
	listNode *tmp;
	while(a){
		if(a->data==x){//如果找到x，则freq加一，并向前搜索大于a的freq的结点所在位置，将a移到这个结点的后面。
			a->freq++;
			tmp=a->pred;
			while(tmp!=ahead && tmp->freq<=a->freq){
				tmp=tmp->pred;
			}
			if(tmp->next!=a){
				//先将a拿出来，别忘了更新pred！！！！
				pre->next=a->next;
				if(pre->next!=NULL)
					pre->next->pred=pre;//还要考虑a是否是最后一个元素！！！！
				//a移到tmp后面
				a->next=tmp->next;
				a->pred=tmp;
				tmp->next=a;
				a->next->pred=a;
			}
			return a;
		}else{//没有找到x，将pre，a移向下一位置
			pre=a;
			a=a->next;
		}
	}
	return NULL;
}
void print(linkList* head){
	head=head->next;
	while(head){
		printf("%d:%d	",head->data,head->freq);
		head=head->next;
	}
	printf("\n");
}
int main(){
	int arr1[10]={33,7,8,116,10,23,121,22,100,245};
	
	//注意：非循环双向链表，第一个结点的pred指向头结点，最后一个结点的next为NULL。
	//建立非循环双向链表，初始化头结点，next为NULL，pred这里初始化为自身。
	linkList* ahead=new listNode;
	ahead->next=NULL;
	ahead->pred=ahead;
	
	linkList *a=ahead,*pre;
	int i=0;
	while(i<10){
		pre=a;
		a->next=new listNode;
		a=a->next;
		a->data=arr1[i];
		a->freq=0;
		a->next=NULL;
		a->pred=pre;
		i++;
	}
	
	while(i){
		printf("(输入0会执行一次后结束)i:");
		scanf("%d",&i);
		if(a=locate(ahead,i)){//a存在打印它的值及频度，否则打印NULL
			print(ahead);
			printf("data:%d,freq:%d\n",a->data,a->freq);
		}else{
			printf("NULL\n");
		}
	}
	return 0;
}

/*
2.3.7，二：21
带头结点的非循环单链表，只给出头指针list，查找链表倒数第k个位置上的结点，k为正整数，查找成功打印data值，返回1，否则返回0.
算法尽可能高效。
*/
#include<cstdio>
#include<cstdlib>

typedef int elemType;
typedef struct linkList{
	elemType data;
	struct linkList *next;
}listNode;

int find(linkList *list,int k){
	int num=0;
	listNode *tmp=list;
	while(tmp=tmp->next){
		num++;
	}
	tmp=list->next;
	for(int i=1;i<=num;i++){
		if(i==k){
			printf("data:%d\n",tmp->data);
			return 1;
		}
		tmp=tmp->next;
	}
	return 0;
}
int main(){
	int arr1[10]={33,7,8,116,10,
	                      23,121,22,100,245};

	linkList* ahead=new listNode;
	ahead->next=NULL;
	
	linkList *a=ahead;
	int i=0;
	while(i<10){
		a->next=new listNode;
		a=a->next;
		a->data=arr1[i];
		a->next=NULL;
		i++;
	}

	printf("%d\n",find(ahead,11));
	
	return 0;
}

