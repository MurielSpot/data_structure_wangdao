/*
4.3.3，二：3
后序遍历二叉树的非递归算法。
*/
//还不是很理解
#include<cstdio>
#include<cstdlib>

struct node{
	int data;
	struct node *left;
	struct node *right;
};
const int SIZE=17;
int arr[SIZE]={0,
						110,
						0,             30,
						0,     0,     5,     9,
						0,0,0,0,  0,40,10,0  };
node* createTree(int index){
	printf("\nnode %d,",index);
	if(!arr[index]){
		printf("NULL\n");
		return NULL;
	}
	node *p=new node;
	printf("data:%d\n",p->data=arr[index]);
	printf("left of node %d",index);
	p->left=createTree(index*2);
	printf("right of node %d",index);
	p->right=createTree(index*2+1);
	return p;
}
//后续遍历递归算法
void recursive_postorder_traversal(node *head){
	if(head){
		recursive_postorder_traversal(head->left);
		recursive_postorder_traversal(head->right);
		printf("%d, ",head->data);
	}
}
//后续遍历非递归算法
void non_recursive_postorder_traversal(node *head){
	node* stack[SIZE];//堆栈存储的是结点的地址。
	int i;
	for(i=0;i<SIZE;i++){
		stack[i]=NULL;
	}
	int sp=-1;
	node *pre=head,*p=head;
	stack[++sp]=head; 
	while(sp!=-1){
		while(p->left){//左孩子不存在则结束循环，若存在则将这个左孩子压入堆栈，并让p指向左孩子。
			pre=p;
			p=p->left;
			stack[++sp]=p;
		}
		p=stack[sp--];
		while(!p->right||p->right==pre){//如果右结点不存在，则打印当前结点，pre记录此次访问，弹出栈顶结点
			printf("%d, ",p->data);
			pre=p;
			if(sp==-1){
				return;
			}
			p=stack[sp--];
		}
		//经过上面的循环，p->right只有存在且未被访问一种情况。只要
		stack[++sp]=p;
		pre=p;
		p=p->right;
		stack[++sp]=p;
	}
}

int main(){
	node *head=createTree(1);
	printf("\nprint tree:");
	recursive_postorder_traversal(head);
	printf("\nprint tree:");
	non_recursive_postorder_traversal(head);
	return 0;
}

/*
4.3.3，二：4
二叉树自上而下、从右到左的层次遍历算法。
*/
#include<cstdio>
#include<cstdlib>

struct node{
	int data;
	struct node *left;
	struct node *right;
};
const int SIZE=17;
int arr[SIZE]={0,
		110,
		70,            30,
		90,    0,     5,     9,
		1,2,   0,0,  0,40,10,0  };
node* createTree(int index){
	if(!arr[index]){
		return NULL;
	}
	node *p=new node;
	p->left=createTree(index*2);
	p->right=createTree(index*2+1);
	return p;
}
void invertLevel(node *root){
	//建立及初始化栈
	node* stack[SIZE];
	int sp=-1;
	//建立及初始化队列
	node* queue[SIZE];
	int front=0,rear=0;
	
	queue[rear]=root;
	rear=(rear+1)%SIZE;
	node *p;
	while(rear!=front){//队列非空，则弹出队首结点，将它的孩子结点加入队尾。该结点压栈。
		p=queue[front];
		front=(front+1)%SIZE;
		if(p->left){
			if((rear+1)%SIZE!=front){
				queue[rear]=p->left;
				rear=(rear+1)%SIZE;
			}
		}
		if(p->right){
			if((rear+1)%SIZE!=front){
				queue[rear]=p->right;
				rear=(rear+1)%SIZE;
			}
		}
		stack[++sp]=p;
	}
	while(sp!=-1){
		printf("%d, ",stack[sp--]->data);
	}
}

int main(){
	node *root=createTree(1);
	printf("\nprint tree:");
	invertLevel(root);
	return 0;
}

/*
4.3.3，二：5
二叉树采用二叉链表存储结构，设计一个非递归算法求二叉树的高度。
*/
#include<cstdio>
#include<cstdlib>
struct node{
	int data;
	struct node *left;
	struct node *right;
};
const int SIZE=21;
int arr[SIZE]={0,
		110,
		70,            30,
		90,    0,     5,     9,
		1,2,   0,0,  0,40,10,0,
		0,0,0,13  };
node* createTree(int index){
	if(!arr[index]){
		return NULL;
	}
	node *p=new node;
	p->left=createTree(index*2);
	p->right=createTree(index*2+1);
	return p;
}
void BTdepth(node *root){
	//建立及初始化队列
	node* queue[SIZE];
	int front=0,rear=0;
	
	queue[rear]=root;
	rear=(rear+1)%SIZE;
	int level=0;
	node *p,*last=root,*nextlast;
	while(rear!=front){//队列非空，则弹出队首结点，将它的孩子结点加入队尾。该结点压栈。
		p=queue[front];
		front=(front+1)%SIZE;
		//下一层孩子压栈时，只要发现有孩子就把它设置为下一层最后一个结点nextlast
		if(p->left){
			if((rear+1)%SIZE!=front){
				queue[rear]=p->left;
				rear=(rear+1)%SIZE;
			}
			nextlast=p->left;
		}
			if((rear+1)%SIZE!=front){
				queue[rear]=p->right;
				rear=(rear+1)%SIZE;
			}
			nextlast=p->right;
		}
		if(p==last){//访问到这一层最后一个结点时，才可以改动last，将它置为下一层最后一个结点nextlast，若下一层没有最后一个结点，nextlast的值和last的值应该是相等的。
			level++;
			last=nextlast;
		}
	}
	printf("%d\n",level);
}

int main(){
	node *root=createTree(1);
	printf("depth:");
	BTdepth(root);
	return 0;
}

/*
4.3.3，二：6
数组a，b分别存储先序遍历和中序遍历的序列，编写算法建立该二叉树的二叉链表。
*/
#include<cstdio>
#include<cstdlib>
struct node{
	int data;
	struct node *left;
	struct node *right;
};

const int SIZE=11;
int a[SIZE]={4,5,1,9,10,13,14,6,7,100,20};
int b[SIZE]={9,1,5,10,13,4,6,14,100,7,20};

node* create(int a1,int a2,int b1,int b2){
	if(a1>a2)return NULL;
	
	node *p=new node;//分割出的子树的先序序列第一个元素a[a1]为当前子树的根
	p->data=a[a1];
	if(a1==a2){//先序遍历只有一个元素，即当前子树只有一个元素，左右孩子直接置为NULL，返回p
		p->left=NULL;
		p->right=NULL;
	}else{//先序遍历不只一个元素，则在中序序列b1-b2中寻找先序序列第一个元素a1在中序序列中的位置，递归获得左右孩子的结点值。
		int tmp=b1;
		while(tmp<=b2&&b[tmp]!=a[a1]){
			tmp++;
		}
		if(tmp>b2){
			printf("somewhere wrong!");
			return NULL;
		}
		p->left=create(a1+1,a1+tmp-b1,b1,tmp-1);//最后的tmp-1写成tmp好像也没影响，可能因为判断是否return NULL是根据a1和a2。写成tmp具体有什么副作用还没想清楚。
		p->right=create(a1+tmp-b1+1,a2,tmp+1,b2);
	}
	return p;
}
void print(node *head){
	if(head){
		printf("%d, ",head->data);
		print(head->left);
		print(head->right);
	}
}
void print2(node *head){
	if(head){
		print2(head->left);
		printf("%d, ",head->data);
		print2(head->right);
	}
}
int main(){
	node *root=create(0,10,0,10);
	printf("print:");
	print(root);
	printf("\nprint2:");
	print2(root);
	return 0;
}

/*
4.3.3，二：7
判别给定二叉树是不是完全二叉树。
*/
//和答案思路不同，且没有运行，不能保证正确。
struct node{
	int data;
	struct node *left;
	struct node *right;
};
int complete(node *p,int size){
	if(!p){
		return 1;//空树为满二叉树！！！！！！！！！！！！！！！！！
	}
	int stack[size],sp=-1;
	int flag=1;
	
	stack[++sp]=p;
	while(sp!=-1){
		p=stack[sp--];
		//遇到一个孩子为空的结点则将flag置为2，此后如果当前结点还有其他右孩子，或其他结点还有孩子，则直接返回0。
		if(p->left){//左孩子存在
			if(flag==1){//之前结点都有两个孩子
				stack[++sp]=p->left;
			}else return 0;//之前结点不全为两个孩子，非完全二叉树
		}else if(flag!=2){//flag不为2，才需要重新给flag赋值
			flag=2;
		}
		if(p->right){
			if(flag==1){
				stack[++sp]=p->right;
			}else return 0;
		}else if(flag!=2){
			flag=2;
		}
	}
	return 1;
}

/*
4.3.3，二：8
计算二叉树双分支结点的个数。
*/
struct node{
	int data;
	struct node *left;
	struct node *right;
};
int n=0;
void complete(node *p){
	if(p){
		if(p->left&&p->right){
			n++;
		}
		complete(p->left);
		complete(p->right);
	}
}

/*
4.3.3，二：9
*/
struct node{
	int data;
	struct node *left;
	struct node *right;
};
int n=0;
void swap(node *p){
	if(p){
		node *tmp=p->left;
		p->left=p->right;
		p->right=tmp
		swap(p->left);
		swap(p->right);
	}
}

/*
4.3.3，二：10
*/
//mine
struct node{
	int data;
	struct node *left;
	struct node *right;
};
int n=0;int k=9;//假设找第9个元素
int preNode(node *p){
	int t1,t2;
	if(p){
		n++;
		if(n==k){
			return p->data;
		}else{
			t1=preNode(p->left);
			if(t1!=-1)return t1;
			t2=preNode(p->right);
			if(t2!=-1)return t2;
		}
	}
	return -1;
}

/*
4.3.3，二：11
删去以元素值x为根节点的这个结点的子树。
*/
//mine，我没删x所在的节点，而答案删了。答案采用了层序遍历以便将x的父结点置空。
//我这里删除的是x的左右子树，在此之后增加将孩子结点为x的结点直接删除置空，应该就和答案一样了。
struct node{
	int data;
	struct node *left;
	struct node *right;
};
void deleteSub(node *p){//删除已x为根的左右两个子树。
	if(p){
		deleteSub(p->left);
		deleteSub(p->right);
		delete p->left;
		p->left=NULL;
		delete p->right;
		p->right=NULL;
	}
	
}
void preNode(node *p,int x){//如果当前结点是x，则删除其左右子树，否则继续在左右子树中寻找x。
	if(p){
		if(p->data==x){
			deleteSub(p);
		}
		preNode(p->left);
		preNode(p->right);
	}
}

/*
4.3.3，二：12
打印值为x的结点的所有祖先结点。
*/
#include<cstdio>
#include<cstdlib>
struct node{
	int data;
	struct node *left;
	struct node *right;
};
const int SIZE=21;
int arr[SIZE]={0,
		110,
		70,            30,
		90,    0,     5,     9,
		1,2,   0,0,  0,40,10,0,
		0,0,0,13  };
node* createTree(int index){
	if(!arr[index]){
		return NULL;
	}
	node *p=new node;
	p->data=arr[index];
	p->left=createTree(index*2);
	p->right=createTree(index*2+1);
	return p;
}

int x=30;
int printAncestor(node *p){
	if(p){
		if(printAncestor(p->left)){
			printf("%d, ",p->data);
			return 1;
		}else if(printAncestor(p->right)){
			printf("%d, ",p->data);
			return 1;
		}
		if(p->data==x){
			return 1;
		}
	}
	return 0;
}
int main(){
	node *root=createTree(1);
	printAncestor(root);
	return 0;
}

/*
4.3.3，二：13
打印值为x的结点的所有祖先结点。
*/
#include<cstdio>
#include<cstdlib>
struct node{
	int data;
	struct node *left;
	struct node *right;
};
const int SIZE=21;
int arr[SIZE]={0,
		110,
		70,            30,
		90,    0,     5,     9,
		1,2,   0,0,  0,40,10,0,
		0,0,0,13  };
node* createTree(int index){
	if(!arr[index]){
		return NULL;
	}
	node *p=new node;
	p->data=arr[index];
	p->left=createTree(index*2);
	p->right=createTree(index*2+1);
	return p;
}

int x=30;
node *t1,*t2;
node *r=NULL;
node* commonAncestor(node *root,node *p,node *q){
	if(!p||!q)return NULL;
	if(root){
		//t1，t2而有p，q，NULL，r四种取值，依次表示是p的祖先，是q的祖先，不是p或q的祖先，找到了r
		node *t1=commonAncestor(root->left,p,q);
		node *t2=commonAncestor(root->right,p,q);
		if(r){//执行过前面两个函数之后，如果r已经找到，直接返回r
			return r;
		}
		//若r还没找到，继续下面的判断，判断当前结点是否是祖先结点的两种情况：1、左右孩子分别是p，q的祖先结点；2、当前结点是p或q，而某个孩子是q或p的祖先结点。
		//若当前结点是祖先结点，则更改r的值，返回r。否则返回p，q，NULL。
		if((t1==p&&t2==q)||(t1==q&&t2==p)){
			r=root;return r;
		}else if(root==p){
			if(t1==q||t2==q){
				r=root;return r;
			}else return root;
		}else if(root==q){
			if(t1==p||t2==p){
				r=root;return r;
			}else return root;
		}else{
			if(t1)return t1;
			if(t2)return t2;
		}
	}
	return NULL;
}
node* find(node* root,int x){
	if(root){
		if(root->data==x)return root;
		node *t;
		if(t=find(root->left,x)){
			return t;
		}else if(t=find(root->right,x)){
			return t;
		}
	}
	return NULL;
}
int main(){
	node *root=createTree(1);
	node *p=find(root,13),*q=find(root,1),*tmp;
	if(p){
		printf("p->data=%d,p->addr=%d,",p->data,p);
	}else printf("NULL,");
	if(q){
		printf("p->data=%d,p->addr=%d\n",q->data,q);
	}else printf("NULL\n");
	if(tmp=commonAncestor(root,p,q)){
		printf("tmp->data=%d\n",tmp->data);
	}else printf("no p or q!\n");
	if(r){
		printf("r->data=%d",r->data);
	}else printf("no common!");
	return 0;
}

/*
4.3.3，二：14
求非空二叉树的宽度。
*/
#include<cstdio>
#include<cstdlib>
struct node{
	int data;
	struct node *left;
	struct node *right;
};
const int SIZE=21;
int arr[SIZE]={0,
		110,
		70,            30,
		90,    2,     10,     9,
		1,2,   20,80,  0,40,0,0,
		0,0,   0,13  };
node* createTree(int index){
	if(!arr[index]){
		return NULL;
	}
	node *p=new node;
	p->data=arr[index];
	p->left=createTree(index*2);
	p->right=createTree(index*2+1);
	return p;
}

int width(node *p){
	node *queue[SIZE];//用的是队列！！！！！不是堆栈
	int front=0,rear=0;
	
	node *last=p,*tmplast=p;
	queue[rear++]=p;
	
	int max=1;
	int tmpmax=0;
	while(front!=rear){
		//将堆栈里当前到last的结点弹出，扫描孩子压入栈中，最后一个孩子为tmplast。扫描到last时，将tmplast赋给last。
		p=queue[front++];
		if(p->left){
			queue[rear++]=p->left;
			tmplast=p->left;
			tmpmax++;
		}
		if(p->right){
			queue[rear++]=p->right;
			tmplast=p->right;
			tmpmax++;
		}
		if(p==last){
			last=tmplast;
			if(max<tmpmax)max=tmpmax;
			tmpmax=0;
		}
	}
	return max;
}
int main(){
	node *root=createTree(1);
	printf("width:%d",width(root));
	return 0;
}

/*
4.3.3，二：15
满二叉树，所有结点值均不同，已知先序序列为pre，涉及算法求后序序列post。
*/
#include<cstdio>
#include<cstdlib>
struct node{
	int data;
	struct node *left;
	struct node *right;
};
const int SIZE=21;
int stack[SIZE];
int sp=-1;
void postOrder(int preOrder[],int front,int rear){
	if(front!=rear){
		postOrder(preOrder,front+1,front+(rear-front)/2);
		postOrder(preOrder,front+1+(rear-front)/2,rear);
	}
	stack[++sp]=preOrder[front];
}
int arr[SIZE]={0,
		110,
		70,            30,
		90,    4,     10,     9,
		1,2,   20,80,  3,40,5,7,
		0,0,   0,0  };
int preOrder[SIZE]={110,70,90,1,2,4,20,80,30,10,3,40,9,5,7};
int main(){
	postOrder(preOrder,0,14);
	for(int i=0;i<=sp;i++){
		printf("%d,",stack[i]);
	}
	return 0;
}

/*
4.3.3，二：16
设计算法将二叉树叶结点从左到右连成一个单链表，表头指针为head，二叉树按二叉链表方式存储，链接时用叶结点的右结点的右指针域来存放单链表指针。
*/
#include<cstdio>
#include<cstdlib>
struct node{
	int data;
	struct node *left;
	struct node *right;
};
const int SIZE=24;
int arr[SIZE]={0,
		110,
		70,            30,
		90,    2,     10,     9,
		1,2,   20,80,  0,40,0,0,
		0,0,0,13,43,45  };
node* createTree(int index){
	if(!arr[index]||index>=SIZE){
		return NULL;
	}
	node *p=new node;
	p->data=arr[index];
	p->left=createTree(index*2);
	p->right=createTree(index*2+1);
	return p;
}
void print(node *p){
	if(p){
		printf("%d, ",p->data);
		print(p->left);
		print(p->right);
	}
}
node *head=NULL;
node *tmp=NULL;
void leaves(node *p){
	if(p){
		if(!p->left && !p->right){
			if(head){
				tmp->right=p;
				tmp=p;
			}else{
				head=p;
				tmp=p;
			}
		}
		leaves(p->left);
		leaves(p->right);
	}
}
int main(){
	node *root=createTree(1);
	printf("\n");
	leaves(root);
	node *p=head;
	while(p){
		printf("%d, ",p->data);
		p=p->right;
	}
	return 0;
}

/*
4.3.3，二：17
设计算法判断两颗二叉树是否相似。相似：t1和t2都是空的二叉树或者都只有一个根结点，或t1的左子树和t2的左子树是相似的且t1的右子树和t2的右子树是相似的。
*/
//答案的做法
int similar(node *t1,node *t2){
	if(t1&&t2){//当前结点都存在，继续判断
		int tag1=similar(t1->left,t2->left);
		int tag2=similar(t1->right,t2->right);
		return tag1&&tag2;
	}else if(!t1&&!t2){//当前树都不存在
		return 1;
	}else return 0;//只有一个树存在
}

/*
4.3.3，二：17，把题目改变：
设计算法判断两颗树是否相似。相似：t1和t2都是空的二叉树，或者都只有一个结点，或t1，t2都有两个结点且t1的左子树和t2的左子树是相似的且t1的右子树和t2的右子树是相似的。
这里与上面的区别在于，不要求t1和t2有一个结点时，这一个结点为根结点时才相似。
即一个结点只有一个孩子结点时，是不分左右的。
*/
#include<cstdio>
#include<cstdlib>
struct node{
	int data;
	struct node *left;
	struct node *right;
};
const int SIZE=24;

node* createTree(int index,int array[]){
	if(!array[index]||index>=SIZE){
		return NULL;
	}
	node *p=new node;
	p->data=array[index];
	p->left=createTree(index*2,array);
	p->right=createTree(index*2+1,array);
	return p;
}

inline int subtree(node *p){
	if(p->left&&p->right){
		return 2;
	}else if(!p->left && !p->right){
		return 0;
	}else return 1;
}
int similar(node *t1,node *t2){
	int tag1,tag2;//这里不能用全局变量，因为递归里会改变tag的值。
	if(t1&&t2){//当前结点都存在，继续判断
		printf("t1:%d,t2:%d\n",t1->data,t2->data);
		if(subtree(t1)==2 && subtree(t2)==2){
			tag1=similar(t1->left,t2->left);
			printf("t1:%d,t2:%d\n",t1->data,t2->data);
			tag2=similar(t1->right,t2->right);
			printf("t1:%d,t2:%d\n",t1->data,t2->data);
			if(tag1&&tag2)return 1;//左右子树存在且均相似
			else return 0;//左右子树存在，但并不都是相似的。
		}else if(subtree(t1)==0 && subtree(t2)==0){
			return 1;//左右子树均不存在，当前t1、t2都是叶子结点，相似。
		}else if(subtree(t1)==1 && subtree(t2)==1){
			if(t1->left){
				if(t2->left) tag1=similar(t1->left,t2->left);
				else tag1=similar(t1->left,t2->right);
			}else{
				if(t2->left) tag1=similar(t1->right,t2->left);
				else tag1=similar(t1->right,t2->right);
			}
			printf("t1:%d,t2:%d\n",t1->data,t2->data);
			return tag1;
		}else return 0;
	}else if(!t1&&!t2){//当前结点都不存在，好像只有两个根结点才会需要下面这两个if判断。
		return 1;
	}else return 0;//只有一个结点存在
}
int main(){
	int arr[SIZE]={0,
		1,
		0,               3,
		4,       5,      6,   7,
		8,  0,   10,  11,0,13,0,0,
		0,0,0,19,20,21  };
	int arr2[SIZE]={0,
		1,
		2,               3,
		4,       5,      6,     7,
		8,  0,   10,  11,0,13,0,0,
		0,0,0,19,20,21  };
	node *t1=createTree(1,arr);
	node *t2=createTree(1,arr2);
	printf("%d",similar(t1,t2));
	return 0;
}

/*
4.3.3，二：18
在中序线索二叉树里查找指定结点在后序的前驱结点的算法。
*/
//看了答案。我没有按题目要求查找指定结点的前驱，而是把所有结点的前驱都打印出来了。
#include<cstdio>
#include<cstdlib>
struct threadNode{
	int data;
	struct threadNode *lchild,*rchild;
	int ltag,rtag;//1指示结点的后继，0指示结点的孩子。
};

const int SIZE=16;

void createInThread(threadNode *tree);
void inThread(threadNode* &p,threadNode* &pre);
threadNode* createTree(int index,int array[]);
void print(threadNode *p);


threadNode* createTree(int index,int array[]){
	if(!array[index]||index>=SIZE){
		return NULL;
	}
	threadNode *p=new threadNode;
	p->data=array[index];
	p->ltag=0;
	p->rtag=0;
	p->lchild=createTree(index*2,array);
	p->rchild=createTree(index*2+1,array);
	return p;
}
void print(threadNode *p){
	if(p){
		if(p->ltag==0)print(p->lchild);
		printf("%d, ",p->data);
		if(p->rtag==0)print(p->rchild);
	}
}
void printThreadTree(threadNode *p){
	if(p){
		if(p->ltag==0){
			printThreadTree(p->lchild);
		}
		printf("data:%d, ",p->data);
		if(p->lchild){
			printf("l(%d:%d), ",p->ltag,p->lchild->data);
		}else printf("NULL ");
		if(p->rchild){
			printf("r(%d:%d)\n",p->rtag,p->rchild->data);
		}else printf("NULL\n");
		
		
		if(p->rtag==0){
			printThreadTree(p->rchild);
		}
	}
}
void createInThread(threadNode *tree){
	threadNode *pre=NULL;
	if(tree){
		inThread(tree,pre);
		pre->rchild=NULL;//处理遍历的最后一个结点
		pre->rtag=1;
	}
}
void inThread(threadNode* &p,threadNode* &pre){
	if(p){
		inThread(p->lchild,pre);//递归，线索化左子树
		if(p->lchild==NULL){//左子树为空，建立前驱线索
			p->lchild=pre;
			p->ltag=1;
		}
		if(pre && pre->rchild==NULL){//建立前驱线索的后继线索
			pre->rchild=p;
			pre->rtag=1;
		}
		pre=p;//标记当前结点为刚刚访问过的结点
		inThread(p->rchild,pre);//递归，线索化右子树
	}
}

void postOrderPreNode(threadNode *p,int tag){
	if(p&&tag==0){
		postOrderPreNode(p->lchild,p->ltag);
		//printf("(%d)\n",p->data);
		postOrderPreNode(p->rchild,p->rtag);
		//printf("(%d)\n",p->data);
		//当tag为0时，右孩子存在则右孩子是前一个访问的，右孩子不存在左孩子存在则左孩子是最后一个访问的。
		if(p->rtag==0){
			printf("%d, ",p->rchild->data);
		}else if(p->ltag==0){
			printf("%d, ",p->lchild->data);
		}
		//tag为1时，
		else if(p->ltag==1){
			threadNode *tmp=p;//这里应该不能对tmp赋值p->rchild，因为p可能是中序遍历第一个结点，它的左孩子的值是NULL，如果赋值给tmp，tmp->lchild为NULL->lchild，会出错。
			//如果p是中序遍历第一个结点，则在中序和后序下均无前驱！！！！
			while(tmp->ltag==1&&tmp->lchild!=NULL){
				tmp=tmp->lchild;
			}
			if(tmp->lchild){
				printf("%d, ",tmp->lchild->data);
			}else{
				printf("NULL, ");
			}
		}
	}
}
int main(){
	int arr[SIZE]={0,
		110,
		10,           30,
		0,   0,     5,     9,
		0,0, 0,0,   0,40,  11,0  };
	threadNode *tree=createTree(1,arr);
	print(tree);
	createInThread(tree);
	printf("\n");
	printThreadTree(tree);
	printf("\n");
	postOrderPreNode(tree,0);
	return 0;
}

/*
4.3.3，二：19
二叉树的带权路径长度（wpl）是二叉树中所有叶结点的带权路径长度之和。给定一棵二叉树T，采用二叉链表存储，结点结构为：left，weight，right。其中叶结点的weight域保存该结点的非负权值。设root为指向T的根结点的指针，请设计求T的WPL的算法。
*/
#include<cstdio>
#include<cstdlib>
struct Node{
	int data;
	struct Node *lchild,*rchild;
	int weight;//1指示结点的后继，0指示结点的孩子。
};

const int SIZE=16;

Node* createTree(int index,int array[],int weight[]);
void print(Node *p);

Node* createTree(int index,int array[],int weight[]){
	if(!array[index]||index>=SIZE){
		return NULL;
	}
	Node *p=new Node;
	p->data=array[index];
	p->weight=weight[index];
	p->lchild=createTree(index*2,array,weight);
	p->rchild=createTree(index*2+1,array,weight);
	return p;
}
void print(Node *p){
	if(p){
		print(p->lchild);
		printf("%d, ",p->data);
		print(p->rchild);
	}
}
int wpl(Node *p,int depth){
	if(p){
		return wpl(p->lchild,depth+1)+wpl(p->rchild,depth+1)+p->weight*depth;
	}
	return 0;
}
//wpl只记录叶结点，将以上wpl重写
int wpl2(Node *p,int depth){
	if(p){
		if(!p->lchild && !p->rchild){
			return p->weight*depth;
		}else{
			return wpl2(p->lchild,depth+1)+wpl2(p->rchild,depth+1);
		}
	}
	return 0;
}
//下面的是书上的一部分
int wpl_PreOrder(Node *root,int deep){
	static int wpl=0;
	if(root->lchild==NULL&&root->rchild==NULL){
		wpl+=deep*root->weight;
	}
	if(root->lchild){
		wpl_PreOrder(root->lchild,deep+1);
	}
	if(root->rchild){
		wpl_PreOrder(root->rchild,deep+1);
	}
	return wpl;
}
int main(){
	int arr[SIZE]={0,
		110,
		10,           30,
		0,   0,     5,     9,
		0,0, 0,0,   0,40,  11,0  };
	int weight[SIZE]={0,
		1,
		12,         5,
		0,   0,     9,     2,
		0,0, 0,0, 0,4,  11,0  };
	Node *tree=createTree(1,arr,weight);
	print(tree);
	printf("\n");
	printf("wpl:%d; ",wpl(tree,0));
	printf("wpl2:%d; ",wpl2(tree,0));
	printf("wpl_PreOrder:%d",wpl_PreOrder(tree,0));
	return 0;
}
